{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","id","title","dated","images","description","primaryimageurl","culture","style","technique","medium","dimensions","people","department","divison","contact","creditline","toLowerCase","map","person","key","displayname","image","index","src","baseimageurl","alt","alttext","Loading","Preview","searchResults","info","setFeaturedResult","fetchPage","pageUrl","disabled","prev","next","record","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","htmlFor","type","placeholder","onChange","target","length","name","idx","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1981fa4a.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\n export const BASE_URL = 'https://api.harvardartmuseums.org';\n export const KEY = 'apikey=668eaa72-bf4c-4ab9-be94-857445eabb3d';\n \n /**\n  * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n  */\n export async function fetchQueryResultsFromTermAndValue(term, value) {\n   try {\n     const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n     const data = await response.json();\n \n     return data;\n   } catch (error) {\n     throw error;\n   }\n }\n \n /**\n  * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n  */\n export async function fetchQueryResultsFromURL(url) {\n   try {\n     const response = await fetch(url);\n     const data = await response.json();\n \n     return data;\n   } catch (error) {\n     throw error;\n   }\n }\n \n /**\n  * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n  * \n  * Then makes a call to the API, and returns the first page of results\n  */\n export async function fetchQueryResults({\n   century,\n   classification,\n   queryString,\n }) {\n   const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n     century }&keyword=${ queryString }`;\n \n   try {\n     const response = await fetch(url);\n     const data = await response.json();\n \n     return data;\n   } catch (error) {\n     throw error;\n   }\n }\n \n /**\n  * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n  */\n export async function fetchAllCenturies() {\n   if (localStorage.getItem('centuries')) {\n     return JSON.parse(localStorage.getItem('centuries'));\n   }\n \n   const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n \n   try {\n     const response = await fetch(url);\n     const data = await response.json();\n     const records = data.records;\n \n     localStorage.setItem('centuries', JSON.stringify(records));\n \n     return records;\n   } catch (error) {\n     throw error;\n   }\n }\n \n /**\n  * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n  */\n export async function fetchAllClassifications() {\n   if (localStorage.getItem('classifications')) {\n     return JSON.parse(localStorage.getItem('classifications'));\n   }\n \n   const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n \n   try {\n     const response = await fetch(url);\n     const data = await response.json();\n     const records = data.records;\n \n     localStorage.setItem('classifications', JSON.stringify(records));\n \n     return records;\n   } catch (error) {\n     throw error;\n   }\n }","import React, { Fragment } from \"react\";\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n/**\n * We need a new component called Searchable which:\n *\n * Has a template like this:\n *\n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n *\n * When someone clicks the anchor tag, you should:\n *\n * - preventDefault on the event\n * - call setIsLoading, set it to true\n *\n * Then start a try/catch/finally block:\n *\n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch:\n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const results = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(results);\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {\" \"}\n        {searchValue}{\" \"}\n      </a>\n    </span>\n  );\n};\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n *\n * <main id=\"feature\"></main>\n *\n * And like this when one is:\n *\n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n *\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\n * technique, medium, dimensions, people, department, division, contact, creditline\n *\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n *\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n *\n * This component should be exported as default.\n */\nconst Feature = (props) => {\n  const { featuredResult } = props; // this will contain all the facts needed\n  if (!featuredResult) {\n    return <main id=\"feature\"></main>;\n  }\n  const {\n    title,\n    dated,\n    images,\n    primaryimageurl,\n    description,\n    culture, // SEARCHABLE\n    style,\n    technique, // SEARCHABLE\n    medium, // SEARCHABLE\n    dimensions,\n    people, // SEARCHABLE -- person.displayname\n    department,\n    divison,\n    contact,\n    creditline,\n  } = featuredResult;\n  return (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{title}</h3> {/*<h3> {featuredResult.title}</h3>*/}\n          <h4>{dated}</h4>\n        </header>\n        <section className=\"facts\">\n          {/* <span className=\"title\">FACT NAME</span>\n                <span className=\"content\">FACT VALUE</span>*/}\n          {/* {\n                    people ?\n                    people.map(person =>\n                        <Fragment key={person.displayname}>\n                            <span className=\"title\">Person</span>\n                            <Searchable searchTerm=\"person\" searchValue={person.displayname} {...props} />\n                        </Fragment>\n                        )\n                        : null\n                } */}\n          {description ? (\n            <Fragment>\n              <span className=\"title\">Description</span>\n              <span className=\"content\">{description}</span>\n            </Fragment>\n          ) : null}\n          {culture ? (\n            <Fragment>\n              <span className=\"title\">Culture</span>\n              <Searchable\n                searchTerm=\"culture\"\n                searchValue={culture}\n                {...props}\n              />\n            </Fragment>\n          ) : null}\n          {style ? (\n            <Fragment>\n              <span className=\"title\">Style</span>\n              <span className=\"content\">{style}</span>\n            </Fragment>\n          ) : null}\n          {technique ? (\n            <Fragment>\n              <span className=\"title\">Technique</span>\n              <Searchable\n                searchTerm=\"technique\"\n                searchValue={technique}\n                {...props}\n              />\n            </Fragment>\n          ) : null}\n          {medium ? (\n            <Fragment>\n              <span className=\"title\">Medium</span>\n              <Searchable\n                searchTerm=\"medium\"\n                searchValue={medium.toLowerCase()}\n                {...props}\n              />\n            </Fragment>\n          ) : null}\n          {dimensions ? (\n            <Fragment>\n              <span className=\"title\">Dimensions</span>\n              <span className=\"content\">{dimensions}</span>\n            </Fragment>\n          ) : null}\n          {people\n            ? people.map((person) => (\n                <Fragment key={person.displayname}>\n                  <span className=\"title\">Person</span>\n                  <Searchable\n                    searchTerm=\"person\"\n                    searchValue={person.displayname}\n                    {...props}\n                  />\n                </Fragment>\n              ))\n            : null}\n          {department ? (\n            <Fragment>\n              <span className=\"title\">Department</span>\n              <span className=\"content\">{department}</span>\n            </Fragment>\n          ) : null}\n          {divison ? (\n            <Fragment>\n              <span className=\"title\">Division</span>\n              <span className=\"content\">{divison}</span>\n            </Fragment>\n          ) : null}\n          {contact ? (\n            <Fragment>\n              <span className=\"title\">Contact</span>\n              <span className=\"content\">{contact}</span>\n            </Fragment>\n          ) : null}\n          {creditline ? (\n            <Fragment>\n              <span className=\"title\">Creditline</span>\n              <span className=\"content\">{creditline}</span>\n            </Fragment>\n          ) : null}\n        </section>\n        <section className=\"photos\">\n          {images\n            ? images.map((image, index) => (\n                <img\n                  key={index}\n                  src={image.baseimageurl}\n                  alt={image.alttext}\n                ></img>\n              ))\n            : null}\n          {/* <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE /> */}\n        </section>\n      </div>\n      {/*if no feature, return null*/}\n    </main>\n  );\n};\nexport default Feature;\n","import React from 'react';\n/**\n * Create and export a component called Loading which uses this static HTML template:\n *\n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\nconst Loading = () => {\n    return (\n        <div id=\"loading\">\n            <h2 className=\"message\">Searching...</h2>\n        </div>\n    )\n}\nexport default Loading","import React from 'react';\n\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  const {\n    searchResults: { info, records },\n    setSearchResults,\n    setFeaturedResult,\n    setIsLoading,\n  } = props;\n\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id='preview'>\n      <header className='pagination'>\n        <button\n          disabled={info.prev ? false : true}\n          className='previous'\n          onClick={() => fetchPage(info.prev)}\n        >\n          Previous\n        </button>\n        <button\n          disabled={info.next ? false : true}\n          className='next'\n          onClick={() => fetchPage(info.next)}\n        >\n          Next\n        </button>\n      </header>\n      <section className='results'>\n        {records.map((record, index) => {\n          return (\n            <div\n              key={index}\n              className='object-preview'\n              onClick={(event) => {\n                event.preventDefault();\n                setFeaturedResult(record);\n              }}\n            >\n              {record.primaryimageurl && (\n                <img src={record.primaryimageurl} alt={record.description} />\n              )}\n              {record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>}\n            </div>\n          );\n        })}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // the props we passed in is setIsLoading and setSearchResults\n  // remember props is an object\n  // console.log(\"in Search component\")\n  // console.log(props) -> {setIsLoading: ƒ, setSearchResults: ƒ}\n\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  // props.setIsLoading(...)\n  // we are matching the name when deconstructing\n  const { setIsLoading, setSearchResults  } = props\n\n  // we can now do setIsLoading()\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n   const [centuryList, setCenturyList] = useState([])\n   const [classificationList, setClassificationList] = useState([])\n   const [queryString, setQueryString] = useState(\"\")\n   const [century, setCentury] = useState(\"any\")\n   const [classification, setClassification] = useState(\"any\")\n\n\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    // fetchAllCenturies()\n    // fetchAllClassifications()\n\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n    .then(([centuries, classifications]) => {\n      setCenturyList(centuries)\n      setClassificationList(classifications)\n    })\n    .catch(console.error)\n\n\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * HINT: Look at your state\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n\n\n  return ( <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const results = await fetchQueryResults( { century, classification, queryString})\n      setSearchResults(results)\n    } catch (error){\n      console.error()\n    } finally {\n      setIsLoading(false)\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={event => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={event => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {\n              //   {\n              //     \"objectcount\": 5623,\n              //     \"id\": 30,\n              //     \"lastupdate\": \"2015-11-22T03:17:45-0500\",\n              //     \"name\": \"Sculpture\",\n              //     \"classificationid\": 30\n              // }\n        classificationList.map((classification, idx) => {\n             return <option key={`${idx}:${classification.name}`} value={classification.name}>{classification.name}</option>\n            // <option value=\"Sculpture\">Sculpture</option>\n          })\n        }\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={event => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */\n               centuryList.map((century, idx) => {\n                return <option key={`${idx}:${century.name}`} value={century.name}>{century.name}</option>\n               // <option value=\"Sculpture\">Sculpture</option>\n             })\n              \n              //   {\n              //     \"id\": 37525374,\n              //     \"objectcount\": 28,\n              //     \"lastupdate\": \"2015-11-22T03:17:52-0500\",\n              //     \"temporalorder\": 3,\n              //     \"name\": \"6th millennium BCE\"\n              // }\n        }\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n)}\n\nexport default Search;","\n\n\n import React from 'react';\n\n /**\n  * Create/export a component called Title which uses this static HTML as the template:\n  * \n  * <div id=\"title\">\n  *   <h1>\n  *     The Art Collector\n  *   </h1>\n  *   <h5>\n  *     Search the Harvard Art Museums' Private Collections\n  *   </h5>\n  * </div>\n  */\n \n const Title = () => {\n     return (\n         <div id=\"title\">\n             <h1>The Art Collector</h1>\n             <h5>Search the Harvard Art Museums' Private Collections</h5>\n         </div>\n     )\n }\n \n export default Title\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Loading, Title, Feature, Preview, Search } from './components';\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className='app'>\n      <Title />\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult} />\n      <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {isLoading ? <Loading /> : null}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}